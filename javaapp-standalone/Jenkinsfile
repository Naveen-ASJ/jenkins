pipeline {
    agent { label 'Docker' }

    environment {
        SONARQUBE = credentials('sonar-scanner') // Jenkins credential for SonarQube token
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'master', url: 'https://github.com/Naveen-ASJ/jenkins.git'
            }
        }

        stage('Build') {
            steps {
                dir('javaapp-standalone') {
                    sh "mvn clean package -DskipTests"
                }
            }
        }

        stage('Test') {
            steps {
                dir('javaapp-standalone') {
                    sh "mvn test"
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar') { // must match Jenkins SonarQube installation name
                    sh '''
                        cd javaapp-standalone
                        mvn clean verify sonar:sonar \
                            -Dsonar.projectKey=sonar \
                            -Dsonar.host.url=http://107.20.53.49:9000 \
                            -Dsonar.login=$SONARQUBE
                    '''
                }
            }
        }

        stage('Trivy FS Scan') {
            steps {
                dir('javaapp-standalone') {
                    sh "trivy fs --exit-code 0 --severity HIGH,CRITICAL ."
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('javaapp-standalone') {
                    sh "docker build -t myapp:latest ."
                }
            }
        }

        stage('Trivy Image Scan') {
            steps {
                sh '''
                    export TRIVY_CACHE_DIR=/tmp/trivy
                    trivy image --severity HIGH,CRITICAL --exit-code 0 myapp:latest
                '''
            }
        }

        stage('Push to ECR') {
            steps {
                sh '''
                    export AWS_PASS=$(aws ecr get-login-password --region us-east-1)
                    echo $AWS_PASS | docker login --username AWS --password-stdin 337909742575.dkr.ecr.us-east-1.amazonaws.com
                    docker tag myapp:latest 337909742575.dkr.ecr.us-east-1.amazonaws.com/javaapp-image:latest
                    docker push 337909742575.dkr.ecr.us-east-1.amazonaws.com/javaapp-image:latest
                '''
            }
        }

        stage('Deploy') {
            steps {
                sh '''
                    docker stop myapp || true
                    docker rm -f myapp || true
                    docker pull 337909742575.dkr.ecr.us-east-1.amazonaws.com/javaapp-image:latest
                    docker run -d --name myapp -p 5000:5000 337909742575.dkr.ecr.us-east-1.amazonaws.com/javaapp-image:latest
                '''
            }
        }
    }
}
